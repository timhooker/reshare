{"version":3,"sources":["app.js","nav/main-nav-controller.js","shares/share.js","shares/shares-controller.js","utils/ajax-helper.js","utils/string-util.js","users/user-controller.js","users/user.js","users/users-controller.js","shares/services/shares-service.js","users/services/current-user.js","users/services/users-service.js"],"names":[],"mappings":"AAAA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["// The root module for our Angular application\nvar app = angular.module('app', ['ngRoute']);\n","app.directive('shareNav', function () {\n\n  return {\n\n    replace: true,\n\n    scope: {\n      onclose: '='\n    },\n\n    templateUrl: '/nav/main-nav.html',\n\n    controller: ['$location', 'StringUtil', '$log', 'currentUser', '$scope', '$anchorScroll',\n    function($location, StringUtil, $log, currentUser, $scope, $anchorScroll) {\n      var self = this;\n\n      self.isActive = function (path) {\n        // The default route is a special case.\n        if (path === '/') {\n          return $location.path() === '/';\n        }\n        return StringUtil.startsWith($location.path(), path);\n      };\n\n      self.currentUser = currentUser;\n\n      // did this using angular $anchorScroll\n      // when you set $location.has to the id\n      // of an element, it will scroll there when you\n      // call $anchorScroll\n      self.goTo = function(elem) {\n        $location.hash(elem);\n\n        $anchorScroll();\n      };\n\n      self.showMobileNav = function($event) {\n        if($event) {\n          $event.stopPropagation();\n        }\n        if(self.mobileNavShow === true) {\n          self.mobileNavShow = false;\n          document.removeEventListener('click', hideNav);\n        } else {\n          self.mobileNavShow = true;\n          document.addEventListener('click', hideNav);\n        }\n      };\n\n      function hideNav(){\n        $scope.$apply(function() {\n          self.showMobileNav();\n        });\n      }\n\n\n    }],\n\n    controllerAs: 'vm',\n\n    link: function ($scope, element, attrs, ctrl) {\n\n      document.querySelector('.mobile-nav').addEventListener('click', function (e) {\n        e.stopPropagation();\n      });\n    }\n  };\n});\n","app.factory('Share', ['$log', function($log) {\n\n  return function(spec) {\n    spec = spec || {};\n\n    var self = {\n      url: spec.url,\n      description: spec.description || '',\n      tags: spec.tags || [''],\n      _id: spec._id || undefined,\n      upvotes: 0,\n      downvotes: 0,\n\n      addTag: function(tag) {\n        var index = self.tags.indexOf(tag);\n\n        if (index >= 0) {\n          self.tags.splice(index, 1);\n        } else if (tag === undefined || !tag) {\n          tag = '';\n        }\n        self.tags.splice(0, 0, tag);\n      },\n\n      removeTag: function(index) {\n        self.tags.splice(index, 1);\n      }\n    };\n\n    return self;\n  };\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'shares/shares.html',\n    controller: 'SharesCtrl',\n    controllerAs: 'vm',\n    // resolve: {\n    //   shares: ['sharesService', function (sharesService) {\n    //     return sharesService.list();\n    //   }]\n    // }\n  };\n\n  $routeProvider.when('/', routeDefinition);\n  $routeProvider.when('/shares', routeDefinition);\n}])\n.controller('SharesCtrl', ['$log', 'sharesService', 'Share', 'currentUser', function ($log, sharesService, Share, currentUser) {\n  var self = this;\n\n  sharesService.list().then(function(data){\n    self.shares = data;\n    self.shares.forEach(function(share) {\n      self.listComments(share);\n      share.shareStatus = 'Show';\n    });\n  });\n  // self.shares = shares;\n\n  self.newShare = Share();\n\n  self.currentUser = currentUser;\n\n  refreshShares = function() {\n    sharesService.list().then(function(data){\n      self.shares = data;\n    });\n  };\n\n  self.addShare = function () {\n    var share = self.newShare;\n    self.newShare = Share();\n\n    sharesService.addShare(share).then(function (data) {\n      self.shares = self.shares.filter(function (existingShare) {\n        return existingShare._id !== share._id;\n      });\n      refreshShares();\n    });\n  };\n\n  self.removeShare = function(share) {\n    sharesService.removeShare(share._id).then(function (data) {\n      self.shares = self.shares.filter(function (existingShare) {\n        return existingShare._id !== share._id;\n      });\n    });\n  };\n\n  self.vote = function(index, share, num) {\n    sharesService.vote(share._id, num).then(function(data){\n      sharesService.getByShareId(share._id).then(function(data){\n        share.upvotes = data.upvotes;\n        share.downvotes = data.downvotes;\n        share.clearvotes = data.clearvotes;\n      });\n    });\n  };\n\n  self.addComment = function (share) {\n    sharesService.addComment(share._id, share.newComment).then(function(data) {\n      var comment = data;\n      if(!share.comments) {\n        share.comments = [];\n      }\n      share.comments.push(comment);\n      share.newComment = '';\n    });\n  };\n\n  self.listComments = function (share) {\n    sharesService.listComments(share._id).then(function(data) {\n      share.comments = data;\n    });\n  };\n\n  self.removeComment = function (share, comment) {\n    sharesService.removeComment(share._id, comment._id).then(function(data) {\n      var index = share.comments.indexOf(comment);\n      share.comments.splice(index, 1);\n    });\n  };\n\n  self.toggleComments = function (share) {\n    if (!share.showComments) {\n      share.showComments = true;\n      share.shareStatus = 'Hide';\n    } else {\n      share.showComments = false;\n      share.shareStatus = 'Show';\n    }\n  };\n\n}]);\n","app.factory('ajaxHelper', ['$log', function($log) {\n  return {\n    call: function(p) {\n      return p.then(function (result) {\n        return result.data;\n      })\n      .catch(function (error) {\n        $log.log(error);\n      });\n    }\n  };\n}]);\n","// A little string utility... no biggie\napp.factory('StringUtil', function() {\n  return {\n    startsWith: function (str, subStr) {\n      str = str || '';\n      return str.slice(0, subStr.length) === subStr;\n    }\n  };\n});\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'users/user.html',\n    controller: 'UserCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      user: ['$route', 'usersService', function ($route, usersService) {\n        var routeParams = $route.current.params;\n        return usersService.getByUserId(routeParams.userid);\n      }],\n      github: ['$route', '$http', function ($route, $http) {\n        var routeParams = $route.current.params;\n        return $http.get('https://api.github.com/users/' + routeParams.userid);\n      }]\n    }\n  };\n\n  $routeProvider.when('/users/:userid', routeDefinition);\n}])\n.controller('UserCtrl', ['user', 'github', function (user, github) {\n  this.user = user;\n  this.github = github.data;\n  console.log(this.github);\n}]);\n","app.factory('User', function () {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      userId: spec.userId || '',\n      role: spec.role || 'user'\n    };\n  };\n});\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'users/users.html',\n    controller: 'UsersCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      users: ['usersService', function (usersService) {\n        return usersService.list();\n      }]\n    }\n  };\n\n  $routeProvider.when('/users', routeDefinition);\n}])\n.controller('UsersCtrl', ['users', 'usersService', 'User', function (users, usersService, User) {\n  var self = this;\n\n  self.users = users;\n\n  self.newUser = User();\n\n  self.addUser = function () {\n    // Make a copy of the 'newUser' object\n    var user = User(self.newUser);\n\n    // Add the user to our service\n    usersService.addUser(user).then(function () {\n      // If the add succeeded, remove the user from the users array\n      self.users = self.users.filter(function (existingUser) {\n        return existingUser.userId !== user.userId;\n      });\n\n      // Add the user to the users array\n      self.users.push(user);\n    });\n\n    // Clear our newUser property\n    self.newUser = User();\n  };\n}]);\n","app.factory('sharesService', ['$http', '$log', 'ajaxHelper', function($http, $log, ajaxHelper) {\n\n  return {\n    list: function () {\n      return ajaxHelper.call($http.get('/api/res'));\n    },\n\n    getByShareId: function (shareId) {\n      if (!shareId) {\n        throw new Error('getByShareId requires a share id');\n      }\n      return ajaxHelper.call($http.get('/api/res/' + shareId));\n    },\n\n    addShare: function (share) {\n      return ajaxHelper.call($http.post('/api/res', share));\n    },\n\n    removeShare: function (shareId) {\n      return ajaxHelper.call($http.delete('/api/res/' + shareId));\n    },\n\n    vote: function(id, num) {\n      var vote = { vote: num };\n      return ajaxHelper.call($http.post('/api/res/' + id + '/votes', vote));\n    },\n\n    addComment: function (shareId, text) {\n      var comment = { text: text };\n      return ajaxHelper.call($http.post('/api/res/' + shareId + '/comments', comment));\n    },\n\n    removeComment: function (shareId, id) {\n      return ajaxHelper.call($http.delete('/api/res/' + shareId + '/comments/' + id));\n    },\n\n    listComments: function (shareId) {\n      return ajaxHelper.call($http.get('/api/res/' + shareId + '/comments'));\n    }\n  };\n}]);\n","app.factory('currentUser', ['$http', function($http) {\n\n  var current = {\n    user: undefined,\n    github: undefined\n  };\n\n  $http.get('/api/users/me').then(function(result) {\n    current.user = result.data;\n    $http.get('https://api.github.com/users/' + current.user.userId ).then(function(result) {\n      current.github = result.data;\n    });\n  }).catch(function(err) {\n    current.user = undefined;\n  });\n\n  return current;\n}]);\n","app.factory('usersService', ['$http', '$q', '$log', 'ajaxHelper', function($http, $q, $log, ajaxHelper) {\n\n  return {\n    list: function () {\n      return ajaxHelper.call($http.get('/api/users'));\n    },\n\n    getByUserId: function (userId) {\n      if (!userId) {\n        throw new Error('getByUserId requires a user id');\n      }\n\n      return ajaxHelper.call($http.get('/api/users/' + userId));\n    },\n\n    addUser: function (user) {\n      return ajaxHelper.call($http.post('/api/users', user));\n    },\n\n    getCurrentUser: function() {\n      return ajaxHelper.call($http.get('/api/users/me'));\n    }\n\n  };\n}]);\n"],"sourceRoot":"/source/"}