{"version":3,"sources":["app.js","nav/main-nav-controller.js","shares/share.js","shares/shares-controller.js","users/user-controller.js","users/user.js","users/users-controller.js","utils/ajax-helper.js","utils/string-util.js","shares/services/shares-service.js","users/services/current-user.js","users/services/users-service.js"],"names":[],"mappings":"AAAA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["// The root module for our Angular application\nvar app = angular.module('app', ['ngRoute']);\n","app.controller('MainNavCtrl',\n  ['$location', 'StringUtil', '$log', 'currentUser', function($location, StringUtil, $log, currentUser) {\n    var self = this;\n\n    self.isActive = function (path) {\n      // The default route is a special case.\n      if (path === '/') {\n        return $location.path() === '/';\n      }\n      return StringUtil.startsWith($location.path(), path);\n    };\n\n    self.currentUser = currentUser;\n  }]);\n","app.factory('Share', ['$log', function($log) {\n\n  return function(spec) {\n    spec = spec || {};\n\n    var self = {\n      url: spec.url,\n      description: spec.description || '',\n      tags: spec.tags || [''],\n      _id: spec._id || undefined,\n      upvotes: 0,\n      downvotes: 0,\n\n      addTag: function(tag) {\n        var index = self.tags.indexOf(tag);\n\n        if (index >= 0) {\n          self.tags.splice(index, 1);\n        } else if (tag === undefined || !tag) {\n          tag = '';\n        }\n        self.tags.splice(0, 0, tag);\n      },\n\n      removeTag: function(index) {\n        self.tags.splice(index, 1);\n      }\n    };\n\n    return self;\n  };\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'shares/shares.html',\n    controller: 'SharesCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      shares: ['sharesService', function (sharesService) {\n        return sharesService.list();\n      }]\n    }\n  };\n\n  $routeProvider.when('/', routeDefinition);\n  $routeProvider.when('/shares', routeDefinition);\n}])\n.controller('SharesCtrl', ['$log', 'sharesService', 'shares', 'Share', 'currentUser', function ($log, sharesService, shares, Share, currentUser) {\n  var self = this;\n\n  self.shares = shares;\n\n  self.newShare = Share();\n\n  self.currentUser = currentUser;\n\n  refreshShares = function() {\n    sharesService.list().then(function(data){\n      self.shares = data;\n    });\n  };\n\n  self.addShare = function () {\n    var share = self.newShare;\n    self.newShare = Share();\n\n    sharesService.addShare(share).then(function (data) {\n      self.shares = self.shares.filter(function (existingShare) {\n        return existingShare._id !== share._id;\n      });\n      refreshShares();\n    });\n  };\n\n  self.vote = function(index, share, num) {\n    sharesService.vote(share._id, num).then(function(data){\n      sharesService.getByShareId(share._id).then(function(data){\n        self.shares.splice(index, 1, data);\n      });\n    });\n  };\n\n  self.addComment = function (share) {\n    sharesService.addComment(share._id, share.newComment).then(function(data) {\n      sharesService.getByShareId(share._id).then(function(data){\n        self.shares.splice(index, 1, data);\n      });\n    });\n  };\n\n  self.listComments = function (share) {\n    sharesService.listComments(share._id).then(function(data) {\n      return data;\n    });\n  };\n\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'users/user.html',\n    controller: 'UserCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      user: ['$route', 'usersService', function ($route, usersService) {\n        var routeParams = $route.current.params;\n        return usersService.getByUserId(routeParams.userid);\n      }]\n    }\n  };\n\n  $routeProvider.when('/users/:userid', routeDefinition);\n}])\n.controller('UserCtrl', ['user', function (user) {\n  this.user = user;\n}]);\n","app.factory('User', function () {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      userId: spec.userId || '',\n      role: spec.role || 'user'\n    };\n  };\n});\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'users/users.html',\n    controller: 'UsersCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      users: ['usersService', function (usersService) {\n        return usersService.list();\n      }]\n    }\n  };\n\n  $routeProvider.when('/users', routeDefinition);\n}])\n.controller('UsersCtrl', ['users', 'usersService', 'User', function (users, usersService, User) {\n  var self = this;\n\n  self.users = users;\n\n  self.newUser = User();\n\n  self.addUser = function () {\n    // Make a copy of the 'newUser' object\n    var user = User(self.newUser);\n\n    // Add the user to our service\n    usersService.addUser(user).then(function () {\n      // If the add succeeded, remove the user from the users array\n      self.users = self.users.filter(function (existingUser) {\n        return existingUser.userId !== user.userId;\n      });\n\n      // Add the user to the users array\n      self.users.push(user);\n    });\n\n    // Clear our newUser property\n    self.newUser = User();\n  };\n}]);\n","app.factory('ajaxHelper', ['$log', function($log) {\n  return {\n    call: function(p) {\n      return p.then(function (result) {\n        return result.data;\n      })\n      .catch(function (error) {\n        $log.log(error);\n      });\n    }\n  };\n}]);\n","// A little string utility... no biggie\napp.factory('StringUtil', function() {\n  return {\n    startsWith: function (str, subStr) {\n      str = str || '';\n      return str.slice(0, subStr.length) === subStr;\n    }\n  };\n});\n","app.factory('sharesService', ['$http', '$log', 'ajaxHelper', function($http, $log, ajaxHelper) {\n\n  return {\n    list: function () {\n      return ajaxHelper.call($http.get('/api/res'));\n    },\n\n    getByShareId: function (shareId) {\n      if (!shareId) {\n        throw new Error('getByShareId requires a share id');\n      }\n      return ajaxHelper.call($http.get('/api/res/' + shareId));\n    },\n\n    addShare: function (share) {\n      return ajaxHelper.call($http.post('/api/res', share));\n    },\n\n    vote: function(id, num) {\n      var vote = { vote: num };\n      return ajaxHelper.call($http.post('/api/res/' + id + '/votes', vote));\n    },\n\n    addComment: function (shareId, text) {\n      var comment = { text: text };\n      return ajaxHelper.call($http.post('/api/res/' + shareId + '/comments', comment));\n    },\n\n    removeComment: function (shareId, id) {\n      return ajaxHelper.call($http.delete('/api/res/' + shareId + '/comments/' + id));\n    },\n\n    listComments: function (shareId) {\n      return ajaxHelper.call($http.get('/api/res/' + shareId + '/comments'));\n    }\n  };\n}]);\n","app.factory('currentUser', ['$http', function($http) {\n\n  var current = {\n    user: undefined\n  };\n\n  $http.get('/api/users/me').then(function(result) {\n    current.user = result.data;\n  }).catch(function(err) {\n    current.user = undefined;\n  });\n\n  return current;\n}]);\n","app.factory('usersService', ['$http', '$q', '$log', 'ajaxHelper', function($http, $q, $log, ajaxHelper) {\n\n  return {\n    list: function () {\n      return ajaxHelper.call($http.get('/api/users'));\n    },\n\n    getByUserId: function (userId) {\n      if (!userId) {\n        throw new Error('getByUserId requires a user id');\n      }\n\n      return ajaxHelper.call($http.get('/api/users/' + userId));\n    },\n\n    addUser: function (user) {\n      return ajaxHelper.call($http.post('/api/users', user));\n    },\n\n    getCurrentUser: function() {\n      return ajaxHelper.call($http.get('/api/users/me'));\n    }\n  };\n}]);\n"],"sourceRoot":"/source/"}